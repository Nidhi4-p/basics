fibonacci series
================
time complexity (TC)=O(2^N)
space complexity (SC)=O(N)

CODE:
-----

def getNthFib(n):
	a=[]
    if(n==1):
		return 0
	elif(n==2):
		return 1
	else:
		return getNthFib(n-1)+getNthFib(n-2)
		for i in range(1,n):
			getNthFib(i)
------------------------------------------------------------------------------------------------------------------------      
      
time complexity (TC)=O(N)
space complexity (SC)=O(N)

CODE:
-----

def getNthFib(n,mem={1:0,2:1}):
	if n in mem:
		return mem[n]
	else:
		mem[n]=getNthFib(n-1,mem)+getNthFib(n-2,mem)
		return mem[n]
		for i in range(1,n):
			getNthFib(i)
-------------------------------------------------------------------------------------------------------------------------------      
      
time complexity (TC)=O(N)
space complexity (SC)=O(1)  ----->Without using stack or any other memory(more efficient)

CODE:
-----

def getNthFib(n):
	last=[0,1]
	counter=3
	while counter<=n :
		next=last[0]+last[1]
		last[0]=last[1]
		last[1]=next
		counter+=1
	return last[1] if n>1 else  last[0]
	for i in range(1,n):
		getNthFib(i)
